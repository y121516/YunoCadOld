        public bool Equals(Session session)
        {
        }

        [TestMethod]
        public void SessionAutoExit()
        {
            using (var session = AutoExitSession.Start(drawing: Informatix.MGDS.Save.DoNotSave, preference: Informatix.MGDS.Save.DoNotSave))
            {
            } // auto Exit here
        }


    public class AutoExitSession : Session, IDisposable
    {
        readonly Save drawing;
        readonly Save preference;

        AutoExitSession(int sessionID, Save drawing, Save preference) : base(sessionID)
        {
            this.drawing = drawing;
            this.preference = preference;
        }
        public static AutoExitSession Start(StartFileType fileType = StartFileType.MAN, int timeoutMs = DefaultTimeoutMs, Save drawing = Save.Prompt, Save preference = Save.Prompt)
        {
            return new AutoExitSession(Cad.StartMicroGDS(fileType, timeoutMs), drawing, preference);
        }
        #region IDisposable Support
        private bool disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects).
                }

                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
                // TODO: set large fields to null.
                Exit(drawing, preference);

                disposedValue = true;
            }
        }

        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
        // ~AutoExitSession() {
        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
        //   Dispose(false);
        // }

        // This code added to correctly implement the disposable pattern.
        void IDisposable.Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
            // TODO: uncomment the following line if the finalizer is overridden above.
            // GC.SuppressFinalize(this);
        }
        #endregion

    }
